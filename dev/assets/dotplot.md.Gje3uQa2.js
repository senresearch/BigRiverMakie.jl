import{_ as l,C as r,c as d,o as p,aA as n,j as s,G as i,a as o,w as a}from"./chunks/framework.C_e-KWEq.js";const c="/BigRiverMakie.jl/dev/assets/ievuelh.Cu8DH-ie.png",w=JSON.parse('{"title":"Dot plot","description":"","frontmatter":{},"headers":[],"relativePath":"dotplot.md","filePath":"dotplot.md","lastUpdated":null}'),h={name:"dotplot.md"},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function m(y,e,E,b,v,C){const t=r("Badge");return p(),d("div",null,[e[16]||(e[16]=n(`<h1 id="Dot-plot" tabindex="-1">Dot plot <a class="header-anchor" href="#Dot-plot" aria-label="Permalink to &quot;Dot plot {#Dot-plot}&quot;">​</a></h1><p>This plot shows the distribution of data points in each category. The yellow points are the mean of the data points in each category.</p><p>An example of all three jitter algorithms:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie, BigRiverMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">algs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:quasirandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i, alg) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(algs)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    dot_plot!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axs[i], x_indices, y_values, categories; color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), jitter_alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alg, jitter_width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    axs[i]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jitter algorithm: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$alg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+c+'" alt="" width="1000px" height="400px"></p>',5)),s("details",k,[s("summary",null,[e[0]||(e[0]=s("a",{id:"BigRiverMakie.dot_plot",href:"#BigRiverMakie.dot_plot"},[s("span",{class:"jlbinding"},"BigRiverMakie.dot_plot")],-1)),e[1]||(e[1]=o()),i(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dot_plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, x_labels; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots a dotplot. The x values are the categories and the y values are the data points. The x_labels are the labels for the x values.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: The x values.</p></li><li><p><code>y</code>: The y values.</p></li><li><p><code>x_labels</code>: The labels for the x values.</p></li><li><p><code>kwargs</code>: Additional arguments to pass to the <code>dotplot!</code> function.</p></li></ul>',4)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[2]||(e[2]=[s("a",{href:"https://github.com/senresearch/BigRiverMakie.jl/blob/45b2711ace53885bbf2ed7249ae714ec588f87bb/src/dotplot.jl#L1-L13",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",g,[s("summary",null,[e[4]||(e[4]=s("a",{id:"BigRiverMakie.dotplot",href:"#BigRiverMakie.dotplot"},[s("span",{class:"jlbinding"},"BigRiverMakie.dotplot")],-1)),e[5]||(e[5]=o()),i(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[7]||(e[7]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dotplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dotplot!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plots dotplots with the points spread out horizontally around the central points. The central points represent each category.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: The x values.</p></li><li><p><code>y</code>: The y values.</p></li></ul><p><strong>Plot type</strong></p><p>The plot type alias for the <code>dotplot</code> function is <code>DotPlot</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>color</code></strong> = <code>@inherit markercolor</code> — Sets the color of the marker. If no color is set, multiple calls to <code>scatter!</code> will cycle through the axis color palette.</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code> and <code>Makie.Symlog10</code>.</p><p><strong><code>cycle</code></strong> = <code>[:color]</code> — Sets which attributes to cycle when creating multiple plots</p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>depthsorting</code></strong> = <code>false</code> — Enables depth-sorting of markers which can improve border artifacts. Currently supported in GLMakie only.</p><p><strong><code>distancefield</code></strong> = <code>nothing</code> — Optional distancefield used for e.g. font and bezier path rendering. Will get set automatically.</p><p><strong><code>font</code></strong> = <code>&quot;default&quot;</code> — Sets the font to be used for character markers</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>glowcolor</code></strong> = <code>(:black, 0.0)</code> — Sets the color of the glow effect around the marker.</p><p><strong><code>glowwidth</code></strong> = <code>0.0</code> — Sets the size of a glow effect around the marker.</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>jitter_alg</code></strong> = <code>:random</code> — Algorithm to use for jittering the data. One of :none, :random or :quasirandom.</p><p><strong><code>jitter_width</code></strong> = <code>1.0</code> — Width of the jitter — the jitter will be in the range of (-jitter_width / 2, jitter_width / 2).</p><p><strong><code>linecolor</code></strong> = <code>:red</code> — Color of the horizontal line at 0. Check the Makie documentation for more color options.</p><p><strong><code>linestyle</code></strong> = <code>:dash</code> — Style of the horizontal line at 0. Check the Makie documentation for more line style options.</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>marker</code></strong> = <code>@inherit marker</code> — Sets the scatter marker.</p><p><strong><code>marker_offset</code></strong> = <code>Vec3f(0)</code> — The offset of the marker from the given position in <code>markerspace</code> units. An offset of 0 corresponds to a centered marker.</p><p><strong><code>markersize</code></strong> = <code>@inherit markersize</code> — Sets the size of the marker by scaling it relative to its base size which can differ for each marker. A <code>Real</code> scales x and y dimensions by the same amount. A <code>Vec</code> or <code>Tuple</code> with two elements scales x and y separately. An array of either scales each marker separately. Humans perceive the area of a marker as its size which grows quadratically with <code>markersize</code>, so multiplying <code>markersize</code> by 2 results in a marker that is 4 times as large, visually.</p><p><strong><code>markerspace</code></strong> = <code>:pixel</code> — Sets the space in which <code>markersize</code> is given. See <code>Makie.spaces()</code> for possible inputs</p><p><strong><code>meancolor</code></strong> = <code>:orange</code> — Color of mean value scatter markers. Check the Makie documentation for more color options.</p><p><strong><code>meanmarkershape</code></strong> = <code>:circle</code> — Shape of mean value scatter markers. Check the Makie documentation for more shape options.</p><p><strong><code>meanmarkersize</code></strong> = <code>10</code> — Size of mean value scatter points.</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>rotation</code></strong> = <code>Billboard()</code> — Sets the rotation of the marker. A <code>Billboard</code> rotation is always around the depth axis.</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>strokecolor</code></strong> = <code>@inherit markerstrokecolor</code> — Sets the color of the outline around a marker.</p><p><strong><code>strokewidth</code></strong> = <code>@inherit markerstrokewidth</code> — Sets the width of the outline around a marker.</p><p><strong><code>transform_marker</code></strong> = <code>false</code> — Controls whether the model matrix (without translation) applies to the marker itself, rather than just the positions. (If this is true, <code>scale!</code> and <code>rotate!</code> will affect the marker.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>uv_offset_width</code></strong> = <code>(0.0, 0.0, 0.0, 0.0)</code> — <em>No docs available.</em></p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>`,51)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[6]||(e[6]=[s("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.4/src/recipes.jl#L527-L657",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",u,[s("summary",null,[e[8]||(e[8]=s("a",{id:"BigRiverMakie.dotplot!",href:"#BigRiverMakie.dotplot!"},[s("span",{class:"jlbinding"},"BigRiverMakie.dotplot!")],-1)),e[9]||(e[9]=o()),i(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[11]||(e[11]=s("p",null,[s("code",null,"dotplot!"),o(" is the mutating variant of plotting function "),s("code",null,"dotplot"),o(". Check the docstring for "),s("code",null,"dotplot"),o(" for further information.")],-1)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[10]||(e[10]=[s("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.4/src/recipes.jl#L529",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",f,[s("summary",null,[e[12]||(e[12]=s("a",{id:"BigRiverMakie.DotPlot",href:"#BigRiverMakie.DotPlot"},[s("span",{class:"jlbinding"},"BigRiverMakie.DotPlot")],-1)),e[13]||(e[13]=o()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[15]||(e[15]=s("p",null,[s("code",null,"DotPlot"),o(" is the plot type associated with plotting function "),s("code",null,"dotplot"),o(". Check the docstring for "),s("code",null,"dotplot"),o(" for further information.")],-1)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[14]||(e[14]=[s("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.4/src/recipes.jl#L528",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})])])}const F=l(h,[["render",m]]);export{w as __pageData,F as default};
